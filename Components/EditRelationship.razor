@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.EntityFrameworkCore;
@implements IDisposable;
@inject IConfiguration Config;

<div class="col">
	<div class="card">
		<h5 class="card-header">@Relationship.Subject.Name <span style="font-size: smaller">@Relationship.Subject.ShortDescription</span></h5>
		@if(FormRelationship != null)
		{
		<EditForm EditContext="EC" OnSubmit="SubmitForm">
		<div class="card-body">	
			<div class="container-fluid">
				<DisplayError Error=Error />
				@if(ShowSuccessMessage)
				{
					<div class="row">
						<div class="col">
							<Alert Color="AlertColor.Success">@SuccessMessage</Alert>
						</div>
						<strong>Success</strong><br/>
					</div>
				}
				<ShowLoading Loading=Loading>
				<div class="row">
					<div class="col">
						<label for=@GetFormId("RelationshipType") class="form-label">
							Relationship Type
						</label>
						<InputSelect class="form-select" id=@GetFormId("RelationshipType") @bind-Value=FormRelationship.RelationshipTypeId>
						@* TODO - Do recursion and indentation for parent child relationships. *@
							<option value="0"></option>
						@foreach(var relType in RelationshipTypes)
						{
							<option value="@relType.Id">@relType.Name</option>
							@* TODO - Show the value of relType.ShortDescription*@
						}
						</InputSelect>
						@* TODO - Provision for adding a new RelationshipType here, inline. *@
					</div>
				</div>
				<div class="row">
					<div class="col">
						<label for=@GetFormId("Object") class="form-label">
							Object
						</label>
						<InputSelect class="form-select" id=@GetFormId("Object") @bind-Value=FormRelationship.ObjectId>
						@* TODO - Do recursion and indentation for parent child relationships. *@
							<option value="0"></option>
						@foreach(var obj in Objects)
						{
							<option value="@obj.Id">@obj.Name</option>
							@* TODO - Show the value of obj.ShortDescription*@
						}
						</InputSelect>
						@* TODO - Provision for adding a new Object here, inline. *@
					</div>
				</div>
				<div class="row">
					<div class="col">
						@if(FormRelationship.Started != null)
						{
							<label for=@GetFormId("Started") class="form-label">
								Started
							</label>
							<DateInput id=@GetFormId("Started") TValue="DateOnly?" @bind-Value="@FormRelationship.Started" Placeholder="(optional)" />
							<Switch @bind-Value="FormRelationship.StartedIsApproximate" Label="Start Date is approximate" />
						}
						else
						{
							<Button Color="ButtonColor.Secondary" Size="Size.Small" Outline="true" @onclick=InitStartDate>Add Start Date</Button>
						}
					</div>
				</div>
				<div class="row">
					<div class="col">
						@if(FormRelationship.Ended != null)
						{
							<label for=@GetFormId("Ended") class="form-label">
								Ended
							</label>
							<DateInput id=@GetFormId("Ended") TValue="DateOnly?" @bind-Value="@FormRelationship.Ended" Placeholder="(optional)" />
							<Switch @bind-Value="FormRelationship.EndedIsApproximate" Label="End Date is approximate" />
						}
						else
						{
							<Button Color="ButtonColor.Secondary" Size="Size.Small" Outline="true" @onclick=SubmitForm>Add End Date</Button>
						}
					</div>
				</div>
				
				</ShowLoading>
			</div>
		</div>
		<div class="card-footer d-grid gap-2 d-md-flex justify-content-md-end">
			@if(FormIsDirty)
			{
				<Button Color="ButtonColor.Danger" Size="Size.Small" Outline="true" class="card-link" @onclick=ResetForm>Reset</Button>@*Make a ComfirmReset component.*@
			}
			<Button Color="ButtonColor.Warning" Size="Size.Small" Outline="true" class="card-link" @onclick=CancelClicked>Cancel</Button>

			<Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Size="Size.Small" Outline="true" class="card-link">Submit</Button>
		</div>
		</EditForm>
		}
	</div>
</div>

@code
{
	[Parameter]
	[EditorRequired]
	public Relationship Relationship { get; set; } = default!;

	[Parameter]
	[EditorRequired]
	public Action<Relationship> OnSuccess { get; set; } = default!;

	[Parameter]
	[EditorRequired]
	public Action OnCancel { get; set; } = default!;

	[Parameter]
	public IEnumerable<RelationshipType> RelationshipTypes { get; set; } = new List<RelationshipType>();
	
	[Parameter]
	public IEnumerable<Noun> Objects { get; set;} = new List<Noun>();
	
	private bool Loading = true;
	private Relationship? FormRelationship = null!;
	private bool FormIsDirty = false;
	private Exception? Error;

	private bool Editing => Relationship.Id > 0;
	private string SuccessMessage = string.Empty;
	private bool ShowSuccessMessage = false;

	private EditContext EC = new EditContext(new Relationship { Subject = default!, RelationshipType = default!, Object = default! });
	private string FormId = System.Guid.NewGuid().ToString();
	private string GetFormId(string name) => $"{FormId}-{name}";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				// Copy the parameter relationship into a "working" copy to edit.
				// We can work with it, reset it to the original value,
				// and set the paremeter value to it upon a successful edit.
				
				// Yes, this is ugly, will beautify later.
				ResetForm();

				// Set FormIsDirty on any change.
				EC.OnFieldChanged += (sender, args) => FormIsDirty = true;

				var tasks = new List<Task>();
				tasks.Add(SetRelationshipTypes());
				tasks.Add(SetObjects());

				await Task.WhenAll(tasks);
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	public void Dispose()
	{
	}

	private void ResetForm()
	{
		// Might need to initialize FormRelationship here.
		FormRelationship = new Relationship { Subject = null!, RelationshipType = null!, Object = null! };
		Relationship.DeepCopy(FormRelationship!);

		FormIsDirty = false;

		StateHasChanged();
	}

	private void InitStartDate()
	{
		if(FormRelationship != null)
		{
			FormRelationship.Started = new DateOnly();
		}
	}

	private void InitEndDate()
	{
		if(FormRelationship != null)
		{
			FormRelationship.Ended = new DateOnly();
		}
	}

	private async Task SetRelationshipTypes()
	{
		if(RelationshipTypes.Count() == 0)
		{
			using var context = FIABContext.Create(Config);
			RelationshipTypes = await context.RelationshipTypes.ToListAsync();// TODO this is horrifying and WILL blow-up at scale.  Need a searchable, streamable solution.
		}
	}

	private async Task SetObjects()
	{
		if(Objects.Count() == 0)
		{
			using var context = FIABContext.Create(Config);
			Objects = await context.Nouns
				.Where(n => n.Id != Relationship.Subject.Id)// Self-Reference loops are bad.
				.ToListAsync();// TODO just like RelationshipTypes this is a lit bomb with a very short fuse.
		}
	}

	private async Task CancelClicked()
	{
		OnCancel.Invoke();
		await Task.CompletedTask;
	}

	private async Task ShowSuccess(string message, int seconds = 5)
	{
		// TODO spice this up as a component that uses cancellationTokens.
		SuccessMessage = message;
		ShowSuccessMessage = true;

		await Task.Delay(seconds * 1000);
		ShowSuccessMessage = false;
	}

	private async Task SubmitForm()
	{
		var encounteredError = false;
		try
		{
			Error = null;
			Loading = true;
			using var context = FIABContext.Create(Config);

			if(FormRelationship != null)
			{
				// TODO - Never use <InputSelect /> again.
				// Since <InputSelect /> only updates the id property make sure the full-fat property matches its id
				Console.WriteLine($"\t {FormRelationship.RelationshipTypeId}:{FormRelationship.RelationshipType?.Id}:{FormRelationship.RelationshipType?.Name}");
				// null-forgiveness because DB validation gives free error messages.
				FormRelationship.RelationshipType = RelationshipTypes.SingleOrDefault(rt => rt.Id == FormRelationship.RelationshipTypeId)!;
				FormRelationship.Object = Objects.SingleOrDefault(o => o.Id == FormRelationship.ObjectId)!;
				

				if(Editing)
				{
					context.Attach(FormRelationship);
					context.Update(FormRelationship);
					await context.SaveChangesAsync();
				}
				else
				{
					await context.Relationships.AddAsync(FormRelationship);
					await context.SaveChangesAsync();
					
				}

				// Now that FormRelationship is saved, update the Relationship that was passed-in.
				
				
				//Relationship = FormRelationship;
				//ResetForm();

				//OnSuccess.Invoke(FormRelationship);

				FormRelationship.DeepCopy(Relationship);
			}
		}
		catch(Exception ex)
		{
			Error = ex;
			encounteredError = true;
		}
		finally
		{
			Loading = false;

			if(!encounteredError)
			{
				OnCancel.Invoke();// Close and render updated data.
			}
		}
	}
}