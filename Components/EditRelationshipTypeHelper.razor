@using FIAB.Contexts;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore;
@inject IConfiguration Config

<DisplayError Error=Error />
<DisplaySuccess @ref=Success />
@* TODO - Figure out why ShowLoading must be in this component, and not its parent.*@
<ShowLoading Loading=Loading>
	<EditForm Model=Value OnValidSubmit=Submit>
		<div class="row mt-3">
			<div class="col">
				<label for=@GetFormId("name") class="form-label">
					Name
				</label>
				<InputText @bind-Value=Value.Name id=@GetFormId("name") class="form-control" />
				<ValidationMessage For=@(() => Value.Name) />
			</div>
		</div>
		<div class="row mt-3">
			<div class="col">
				<label for=@GetFormId("ShortDescription") class="form-label">
					Short Description
				</label>
				<InputText
					@bind-Value=Value.ShortDescription
					id=@GetFormId("ShortDescription")
					class="form-control"
					placeholder="Short description returned in search results" />
				<ValidationMessage For=@(() => Value.ShortDescription) />
			</div>
		</div>
		<div class="row mt-3">
			<div class="col">
				<label for=@GetFormId("Parent") class="form-label">
					Parent Relationship Type
				</label>
				<RelationshipTypeSearchableSelect @bind-Value=Value.Parent Id=@GetFormId("Parent") />
				<ValidationMessage For=@(() => Value.Parent) />
			</div>
		</div>
		<div class="row mt-3">
			<div class="col">
				<label for=@GetFormId("Details") class="form-label">
					Details
				</label>
				<InputTextArea @bind-Value=Value.Details id=@GetFormId("Details") class="form-control" rows="7" />
				<ValidationMessage For=@(() => Value.Details) />
			</div>
		</div>
		<div class="row mt-3">
			<div class="col">
				<DataAnnotationsValidator/>
				<ValidationSummary/>
			</div>
		</div>
		<div class="row mt-3 @(!ShowButtons ? "d-none" : string.Empty)">
			<div class="col">
				<button type="submit" class="btn btn-primary">Submit</button>
			</div>
		</div>
	</EditForm>
</ShowLoading>
@code
{
	[CascadingParameter(Name="Value")]
	public RelationshipType Value { get; set; } = new RelationshipType();

	[CascadingParameter(Name="Loading")]
	public bool Loading { get; set; } = false;
	
	[Parameter]
	public Func<RelationshipType, Task> OnValueChanged { get; set; } = (async (n) =>  await Task.CompletedTask);

	[Parameter]
	public Action<bool> OnLoadingChanged { get; set; } = (n => throw new NotImplementedException());
	
	[Parameter]
	public Func<Task> OnSuccessfulSubmit { get; set; } = (async () => await Task.CompletedTask);

	[Parameter]
	public bool ShowButtons { get; set; } = true;

	public Exception? Error { get; set; }
	private DisplaySuccess Success = new DisplaySuccess();

	private EditContext EC = new EditContext(new RelationshipType());
	private bool Editing => Value.Id != 0;

	private string FormId = System.Guid.NewGuid().ToString();
	private string GetFormId(string name) => $"{FormId}-{name}";

	protected override async Task OnParametersSetAsync()
	{
		// Ensures we render freshly provided parameters.
		StateHasChanged();
		await Task.CompletedTask;
	}

	private async Task<bool> DoWork()
	{
		OnLoadingChanged(true);
		var goodRun = true;
		await Task.Run(async () => {  
			Error = null;
			
			try
			{
				using var context = FIABContext.Create(Config);
				if(Editing)
				{
					context.Attach(Value);
					context.Update(Value);
					context.SaveChanges();
				}
				else
				{
					// Ensure we're using a valid, existing entity.
					if(Value.Parent != null)
						Value.Parent = await context.RelationshipTypes.SingleAsync(n => n.Id == Value.Parent.Id);
					context.RelationshipTypes.Add(Value);
					context.SaveChanges();
				}
			}
			catch(Exception ex)
			{
				Error = ex;
				goodRun = false;
			}
		 });


		OnLoadingChanged(false);
		//Error = new Exception("Aw, snap!");
		return goodRun;
	}

	public async Task Submit()
	{
		var goodWork = await DoWork();
		if(goodWork)
		{
			var action = Editing ? "edited" : "created";
			await OnValueChanged(Value);
			await Success.ShowSuccess($"{DateTime.Now} RelationshipType {Value.Id} {action}.");
			await OnSuccessfulSubmit();
		}
	}
}