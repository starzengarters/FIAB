@using FIAB.Contexts;
@inject IConfiguration Config

<h2>FUCKEE</h2>
@using Microsoft.AspNetCore.Components.Forms
@using FIAB.Contexts;
@inject IConfiguration Config

<DisplayError Error=Error />
<DisplaySuccess @ref=Success />
<p>Loading: @Loading</p>

<EditForm EditContext="EC" OnSubmit=@(async () => await InvokeAsync(DoAndShow))>
	<div class="row mt-3">
		<div class="col">
			<label for=@GetFormId("name") class="form-label">
				Name
			</label>
			<InputText @bind-Value=Value.Name id=@GetFormId("name") class="form-control" />
			<ValidationMessage For=@(() => Value.Name) />
		</div>
	</div>
	<div class="row mt-3">
		<div class="col">
			<label for=@GetFormId("ShortDescription") class="form-label">
				Short Description
			</label>
			<InputText
				@bind-Value=Value.ShortDescription
				id=@GetFormId("ShortDescription")
				class="form-control"
				placeholder="Short description returned in search results" />
			<ValidationMessage For=@(() => Value.ShortDescription) />
		</div>
	</div>
	<div class="row mt-3">
		<div class="col">
			<label for=@GetFormId("Details") class="form-label">
				Details
			</label>
			<InputTextArea @bind-Value=Value.Details id=@GetFormId("Details") class="form-control" rows="7" />
			<ValidationMessage For=@(() => Value.Details) />
		</div>
	</div>
	<div class="row mt-3">
		<div class="col">
			<DataAnnotationsValidator/>
			<ValidationSummary/>
		</div>
	</div>
	<div class="row mt-3">
		<div class="col">
			<button type="submit" class="btn btn-primary">Submit</button>
		</div>
	</div>
</EditForm>
@code
{
	[CascadingParameter(Name="Value")]
	public Noun Value { get; set; } = new Noun();

	[CascadingParameter(Name="Loading")]
	public bool Loading { get; set; } = false;
	
	[Parameter]
	public Action<bool> OnLoadingChanged { get; set; }

	private Exception? Error;
	private DisplaySuccess Success = new DisplaySuccess();

	private EditContext EC = new EditContext(new Noun());
	private bool Editing => Value.Id != 0;

	private string FormId = System.Guid.NewGuid().ToString();
	private string GetFormId(string name) => $"{FormId}-{name}";

	protected override async Task OnParametersSetAsync()
	{
		// Ensures we render freshly provided parameters.
		StateHasChanged();
		await Task.CompletedTask;
	}

	private async Task<bool> DoWork()
	{
		OnLoadingChanged(true);
		
		await Task.Run(() => {  
			Error = null;
			/*for(var n = 0; n < 10; n++)
			{
				for(var x = 0; x < 10000; x++)
				{
					Console.Write($"\rDoing: {x}");
				}
			}
			Console.WriteLine("");
			Console.WriteLine(Loading);*/
			
			using var context = FIABContext.Create(Config);
			if(Editing)
			{
				context.Attach(Value);
				context.Update(Value);
				context.SaveChanges();
			}
			else
			{
				context.Nouns.Add(Value);
				context.SaveChanges();
			}
		 });


		OnLoadingChanged(false);
		//Error = new Exception("Aw, snap!");
		return true;
	}

	private async Task DoAndShow()
	{
		var goodWork = await DoWork();
		if(goodWork)
		{
			Success.ShowSuccess("Do and Show");
		}
	}
}