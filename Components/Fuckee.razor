@using FIAB.Contexts;
@inject IConfiguration Config

<h2>FUCKEE</h2>
<p>Is Loading? @Loading</p>
<p>Value.Id: @Value.Id</p>
<Button Color="ButtonColor.Primary" Type="ButtonType.Button" onclick=@(async() => await LoadingChanged.InvokeAsync(!Loading))>Toggle Loading</Button>
<br/>
<Button Color="ButtonColor.Primary" Type="ButtonType.Button" onclick=@(async() => await InvokeAsync(DoWork))>Do Work</Button>

<p class="mt-3">
	<DisplayError Error=Error />
	<DisplaySuccess @ref=Success /><br/>
	<Button Color="ButtonColor.Primary" Type="ButtonType.Button" onclick=@(async() => await InvokeAsync(() => Success.ShowSuccess("Button", 3)))>Show Success</Button>
	<Button Color="ButtonColor.Primary" Type="ButtonType.Button" onclick=@(async() => await InvokeAsync(DoAndShow))>Work & Show Success</Button>
</p>
@code
{
	[CascadingParameter(Name="Value")]
	public Noun Value { get; set; } = new Noun();

	[Parameter]
	[EditorRequired]
	public bool Loading { get; set; } = false;
	[Parameter]
	public EventCallback<bool> LoadingChanged { get; set; }

	private Exception? Error;
	private DisplaySuccess Success = new DisplaySuccess();

	protected override async Task OnParametersSetAsync()
	{
		// Ensures we render freshly provided parameters.
		StateHasChanged();

	}

	private async Task<bool> DoWork()
	{
		await LoadingChanged.InvokeAsync(true);
		
		await Task.Run(() => {  
			Error = null;
			for(var n = 0; n < 10; n++)
			{
				for(var x = 0; x < 10000; x++)
				{
					Console.Write($"\rDoing: {x}");
				}
			}
			Console.WriteLine("");
			Console.WriteLine(Loading);
			
			using var ctx = FIABContext.Create(Config);
			var nouns = ctx.Nouns.Take(5).ToList();
			
		 });


		await LoadingChanged.InvokeAsync(false);
		//Error = new Exception("Aw, snap!");
		return true;
	}

	private async Task DoAndShow()
	{
		var goodWork = await DoWork();
		if(goodWork)
		{
			Success.ShowSuccess("Do and Show");
		}
	}
}