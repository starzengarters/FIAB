
<Button Color="ButtonColor.Primary" Type="ButtonType.Button" onclick=@(async() => await InvokeAsync(() => HandleLoadingChanged(!Loading)))>Toggle Loading</Button>
<p>Loading: @Loading</p>
<hr/>
<AuthorizeView Roles=@Constants.Roles.User Context="auth">
	<NotAuthorized>
		<Alert Color="AlertColor.Warning">@Constants.Messages.RoleRequiredUser</Alert>
	</NotAuthorized>
	<Authorized>
		@* TODO - Figure out why this particular ShowLoading breaks the ShowSuccess in the component we're invoking here. *@
		@* <ShowLoading Loading=Loading> *@
			<CascadingValue Name="Value" Value=@Value>
				<CascadingValue Name="Loading" Value=@Loading>
					<Fuckee OnLoadingChanged=HandleLoadingChanged OnValueChanged=HandleValueChanged />
				</CascadingValue>
			</CascadingValue>
		@* </ShowLoading> *@
	</Authorized>
</AuthorizeView>

@code
{
	[Parameter]
    [EditorRequired]
    public Noun Value { get; set; } = new Noun();
    [Parameter]
    public EventCallback<Noun> ValueChanged { get; set; }
	
	private bool Loading = false;

	private async Task HandleValueChanged(Noun input)
	{
		Console.WriteLine("Hello from HandleValueChanged.");
		await ValueChanged.InvokeAsync(input);
		StateHasChanged();
	}

	private void HandleLoadingChanged(bool input)
	{
		Console.WriteLine("Hello from HandleLoadingChanged.");
		Loading = input;
		StateHasChanged();
	}
}