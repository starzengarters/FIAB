@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@namespace FIAB.Components
@inject IConfiguration Config
@inject IJSRuntime JS

<SearchableSelect @ref=Search T="RelationshipType" Value=Value ValueChanged=ValueChanged Search=SearchRTs DefaultOptions=Top5 Id=@Id Placeholder="Placeholder">
	<AddOptionFragment>
		<p>
			<Button Type="ButtonType.Button" Color="ButtonColor.Primary" onclick=@( async () => await ShowModal() ) >Add a new Relationship Type</Button>
		</p>
	</AddOptionFragment>
</SearchableSelect>

<Modal @ref="RtModal" Title="Add a Relationship Type">
	<BodyTemplate>
		<EditRelationshipType
			@ref=EditRtRef
			@bind-Value=RtToAdd
			OnSuccessfulSubmit=AfterSave
			ShowButtons=false />
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" Disabled=@(EditRtRef?.Loading ?? false) @onclick=HideModal>Close</Button>
		<Button Color="ButtonColor.Primary"  Disabled=@(EditRtRef?.Loading ?? false) @onclick=SaveModal>Submit</Button>
	</FooterTemplate>
</Modal>

@code
{
	[Parameter]
	[EditorRequired]
	public RelationshipType? Value { get; set; }

	[Parameter]
	public EventCallback<RelationshipType?> ValueChanged { get; set; }

	[Parameter]
	[EditorRequired]
	public string? Id { get; set; }

	[Parameter]
	public string? Placeholder { get; set; } = "Relationship Type...";

	private SearchableSelect<RelationshipType> Search = new SearchableSelect<RelationshipType>();
	private List<RelationshipType> Top5 = new List<RelationshipType>();
	private EditRelationshipType? EditRtRef;
	private RelationshipType RtToAdd = new RelationshipType();
	private Modal RtModal = new Modal();

	protected override async Task OnInitializedAsync()
	{
		Top5 = await GetTop(15);
	}

	private async Task<IEnumerable<RelationshipType>> SearchRTs(string searchTerm)
	{
		using var db = Contexts.FIABContext.Create(Config);
		var results = await db.RelationshipTypes.Where(n => n.Name.ToLower().Contains(searchTerm.ToLower()))
		.AsNoTracking()
		.Take(8)
		.ToListAsync();
		return results;
	}

	private async Task<List<RelationshipType>> GetTop(int cnt)
	{
		using var db = Contexts.FIABContext.Create(Config);
		
		var dbSet = db.Relationships
			.Include(r => r.Subject)
			.Include(r => r.Object);
		
		return await dbSet.
			GroupBy(r => r.RelationshipType)
			.OrderByDescending(g => g.Count())
			.Take(cnt)
			.Select(g => g.Key!)
			.ToListAsync();
		/*
		var subjects = dbSet
			.GroupBy(r => r.Subject)
			.Select(g => new { Noun = g.Key, Mentions = g.Count() });
		
		var objects = dbSet
			.GroupBy(r => r.Object)
			.Select(g => new { Noun = g.Key, Mentions = g.Count() });
		
		var result = await subjects
			.Union(objects)
			.GroupBy(o => o.Noun)
			.Select(g => new { Noun = g.Key, Mentions = g.Sum(a => a.Mentions)})
			.OrderByDescending(o => o.Mentions)
			.Take(cnt)
			.Select(o => o.Noun!)
			.ToListAsync();
		
		return result;
		*/
	}

	private async Task ShowModal()
	{
		RtToAdd = new RelationshipType { Name = Search.SearchTerm };
		await RtModal.ShowAsync();
	}
	
	private async Task HideModal()
	{
		await RtModal.HideAsync();
	}

	private async Task AfterSave()
	{
		await ValueChanged.InvokeAsync(RtToAdd);
		await RtModal.HideAsync();
	}

	private async Task SaveModal()
	{
		await (EditRtRef?.Submit() ?? Task.CompletedTask);
		await InvokeAsync(StateHasChanged);
		// We could invoke AfterSave() here explicitly,
		// But it's hooked-up as the OnSuccessfulSubmit
		// parameter.  So it closes anytime there's a
		// good submission
	}
}