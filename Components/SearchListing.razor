@using Microsoft.AspNetCore.Components.Forms
@typeparam T

<div class="row">
	<div class="col">
		<div class="input-group">
			<Icon Name="IconName.Search" />
			<InputText
				@bind-Value=SearchTerm
				@oninput=@((e) => DoSearch(e.Value?.ToString() ?? string.Empty))
				@onchange=@((e) => DoSearch(e.Value?.ToString() ?? string.Empty))
				placeholder="@Placeholder"
				class="form-control"
				autocomplete="off" />
		</div>
	</div>
</div>

@code
{
	private string SearchTerm = string.Empty;

	[Parameter]
	[EditorRequired]
	public IEnumerable<T> Value { get; set; } = new List<T>();
	
	[Parameter]
	public EventCallback<IEnumerable<T>> ValueChanged { get; set; }

	[Parameter]
	public string Placeholder { get; set; } = "Search...";

	[Parameter]
	[EditorRequired]
	public Func<string, Task<IEnumerable<T>>> Search { get; set; } = default!;
	
	private CancelableOperation SearchOp = new CancelableOperation { TokenSource = new CancellationTokenSource(), Task = Task.CompletedTask };
	private class CancelableOperation
	{
		public required CancellationTokenSource TokenSource;
		public required Task Task;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			// Parameters have changed, re-run the search.
			var results = await Search(SearchTerm);
			await ValueChanged.InvokeAsync(results);
		}
	}

	public void CancelSearch()
	{
		if(SearchOp.TokenSource != null)
		{
			var eolStatuses = new List<TaskStatus> { TaskStatus.RanToCompletion, TaskStatus.Canceled };
			var problem = eolStatuses.Any(st => st == SearchOp.Task.Status);
			if (!problem)
			{
				SearchOp.TokenSource.Cancel();
			}
		}
	}

	protected async Task DoSearch(string value)
	{
		Console.WriteLine($"\"{value}\"");
		if(SearchTerm != value)
		{
			// Update the value bound to the search input.
			SearchTerm = value;

			// Cancel any other running search
			CancelSearch();

			// Make a cancelable request to the API and process the response.
			var ts = new CancellationTokenSource();
			SearchOp = new CancelableOperation
			{
				TokenSource = ts,
				Task = Task.Run(async () =>
				{
					if(string.IsNullOrWhiteSpace(SearchTerm))
					{
						return;
					}

					// Wait for the user to stop typing before querying DB.
					await Task.Delay(500);
					var results = await Search(SearchTerm);
					Console.WriteLine($"\tSearch({SearchTerm}): {results.Count()}");

					// If our Token didn't get canceled query the DB.
					if (ts.Token.IsCancellationRequested == false)
					{
						await ValueChanged.InvokeAsync(results);
						StateHasChanged();
					}
				}, ts.Token)
			};

			InvokeAsync(async () => await SearchOp.Task);
			await Task.CompletedTask;
		}
	}
}