@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Config

@*TODO - Set the value of this to reflect the currently selected value*@
<div class="row">
	<div class="col">
		@* 
		YOU ARE HERE
		This looks great, but arrow keys aren't working
		And I haven't got a search box plumbed-in *@
		<Dropdown
			@ref=SearchDropdown
			OnShowing=@((e) => _CancelableSearch.Showing = true)
			OnHidden=@((e) => _CancelableSearch.Showing = false)
			class="d-grid gap-2">
			<DropdownToggleButton Color="ButtonColor.Secondary" @onclick=@((e) => SearchToggled()) TabIndex="1">@ButtonText</DropdownToggleButton>
			<DropdownMenu class="p-4 container-fluid">
			@if(_CancelableSearch.Exception != null)
			{
				<Alert>@_CancelableSearch.Exception.Message</Alert>
			}
			else if(_CancelableSearch.Searching)
			{
				<Spinner Type=SpinnerType.Dots Color=SpinnerColor.Secondary />
			}
			else
			{
				@if(Options.Count() == 0)
				{
					@if(!string.IsNullOrWhiteSpace(SearchTerm))
					{
						<div class="col">
							<em>No records starting with "@SearchTerm"</em>
						</div>
					}
				}
				else
				{
					@* @foreach(var option in Options.Select((value, i) => new { value, i }))
					{
						<DropdownItem To="#" TabIndex=@(option.i+1) Type="ButtonType.Button" @onclick=@((e) => OptionClicked(option.value.Id))>
							@option.value.Name
							<p class="muted mt-0 pt-1">@option.value.ShortDescription</p>
						</DropdownItem>
					} *@
					<DropdownItem Type="ButtonType.Link">Billly</DropdownItem>
					<DropdownItem Type="ButtonType.Link">Mary</DropdownItem>
				}
			}
			</DropdownMenu>
		</Dropdown>
	</div>
	<div class="col">
		<Button Type="ButtonType.Button" @onclick=SearchToggled>Toggle</Button>
	</div>
</div>

<div class="row mt-4">
	<div class="col">
		<div class="dropdown">
			<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
				Dropdown button
			</button>
			<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
				@if(Options.Count() == 0)
				{
					@if(!string.IsNullOrWhiteSpace(SearchTerm))
					{
						<li><span class="dropdown-item-text"><em>No records starting with "@SearchTerm"</em></span>
						</li>
					}
				}
				else
				{
					@foreach(var option in Options)
					{
						<li><a class="dropdown-item" href="#">@option.Name - @option.ShortDescription</a></li>
					}
				}
			</ul>
		</div>
	</div>
</div>


@code
{
	[Parameter]
	[EditorRequired]
	public Noun? Value { get; set; }

	[Parameter]
	public EventCallback<Noun?> ValueChanged { get; set; }

	[Parameter]
	[EditorRequired]
	public string? Id { get; set; }

	[Parameter]
	[EditorRequired]
	public Func<string, Task<IEnumerable<Noun>>> Search { get; set; } = default!;

	[Parameter]
	public string? Placeholder { get; set; }

	private string ButtonText =>
		Value != null
			? $"{Value.Name} {Value.ShortDescription}" 
			: string.IsNullOrWhiteSpace(Placeholder)
				? "Nouns that start with..."
				: Placeholder;

	private string SearchTerm { get; set; } = string.Empty;
	private CancelableSearch _CancelableSearch = new CancelableSearch();

	private IEnumerable<Noun> Options = new List<Noun>();
	private Dropdown SearchDropdown = default!;

	private void KeyUp()
	{
		Console.WriteLine($"\n\tFrom KeyUp() SearchTerm: {SearchTerm}");
	}

	#region Search
	private class CancelableSearch
	{
		public Task? Task { get; set; }
		public bool Searching => Task != null && !EolStatuses.Contains(Task!.Status);
		public bool Showing = false;
		public CancellationTokenSource? TokenSource { get; set; }
		public Exception? Exception;

		public static List<TaskStatus> EolStatuses = new List<TaskStatus> { TaskStatus.RanToCompletion, TaskStatus.Canceled };

		public void CancelSearch()
		{
			if(TokenSource != null)
			{
				var problem = EolStatuses.Any(st => st == Task?.Status);
				if (!problem)
				{
					TokenSource.Cancel();
				}
			}
		}
	}

	protected async Task DoSearch(string value)
	{
		Console.WriteLine($"\"{value}\"");
		if(SearchTerm != value)
		{
			// Cancel any other running search
			_CancelableSearch.CancelSearch();
			// Update the value bound to the search input.
			SearchTerm = value;

			// Make a cancelable request to the API and process the response.
			var ts = new CancellationTokenSource();
			_CancelableSearch = new CancelableSearch
			{
				TokenSource = ts,
				Task = Task.Run(async () =>
				{

					if(string.IsNullOrWhiteSpace(SearchTerm))
					{
						Options = new List<Noun>();
						return;
					}
					// Wait for the user to stop typing before querying DB.
					await Task.Delay(500);

					Console.Write($"\n\tInvoking Search({SearchTerm})... ");
					var results = await Search(SearchTerm);

					// If our Token didn't get canceled query the DB.
					if (ts.Token.IsCancellationRequested == false)
					{
						try
						{
							if(results == null)
							{
								throw new Exception($"No Results for term \"{SearchTerm}\"");
							}

							Console.WriteLine($" got {results.Count()}");
							Options = results;
						}
						catch(Exception ex)
						{
							_CancelableSearch.Exception = ex;
						}
					}
				}, ts.Token)
			};

			await _CancelableSearch.Task;
		}
	}
	
	private async Task SearchToggled()
	{
		Console.Write($"\nSearchToggled()... ");
		if(_CancelableSearch.Showing)
		{
			Console.WriteLine("Hiding.");
			await SearchDropdown.HideAsync();
		}
		else
		{
			Console.WriteLine("Showing.");
			using var db = Contexts.FIABContext.Create(Config);
			Options = await db.Nouns.AsNoTracking().ToListAsync();
			await SearchDropdown.ShowAsync();
		}
	}

	private async Task OptionClicked(int id)
	{
		Console.WriteLine($"OptionClicked({id})");
		using var db = Contexts.FIABContext.Create(Config);
		var x = await db.Nouns.SingleOrDefaultAsync(n => n.Id == id);
		await ValueChanged.InvokeAsync(x);
		Console.WriteLine($"x: ({x?.Id}) {x?.Name} {x?.ShortDescription}");
		Console.WriteLine($"Value: ({Value?.Id}) {Value?.Name} {Value?.ShortDescription}");
		await SearchDropdown.HideAsync();
	}
	#endregion
}