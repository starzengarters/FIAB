@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Config
@inject IJSRuntime JS

@*TODO - Set the value of this to reflect the currently selected value*@

<div class="row mt-4">
	<div class="col">
	@if(_CancelableSearch != null)
	{
		<div class="dropdown">
			<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
				Dropdown button
			</button>
			<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
				<li>
					<span class="dropdown-item-text">
						<InputText
							@bind-Value="SearchTerm"
							@oninput="(e) => DoSearch(e.Value?.ToString() ?? string.Empty)"
							@onkeyup=@((e) => KeyUp(e))
							placeholder="@Placeholder" class="form-control" />
					</span>
				</li>
				@if(_CancelableSearch.Exception != null)
				{
					<li>
						<span class="dropdown-item-text">
							<Alert Color="AlertColor.Danger">@_CancelableSearch.Exception.Message</Alert>
						</span>
					</li>
				}
				@if(_CancelableSearch.Searching)
				{
					<li>
						<span class="dropdown-item-text">
							<Spinner Type="SpinnerType.Dots" />
						</span>
					</li>
				}
				else
				{
					@foreach(var option in Options)
					{
						<li><a class="dropdown-item" href="#">@option.Name - @option.ShortDescription</a></li>
					}
				}
			</ul>
		</div>
	}
	</div>
	<div class="col">
		<Button Type="ButtonType.Button" @onclick=@((e) => Populate())>Populate</Button>
	</div>
</div>


@code
{
	[Parameter]
	[EditorRequired]
	public Noun? Value { get; set; }

	[Parameter]
	public EventCallback<Noun?> ValueChanged { get; set; }

	[Parameter]
	[EditorRequired]
	public string? Id { get; set; }

	[Parameter]
	[EditorRequired]
	public Func<string, Task<IEnumerable<Noun>>> Search { get; set; } = default!;

	[Parameter]
	public string? Placeholder { get; set; } = "Nouns starting with...";

	private string ButtonText =>
		Value != null
			? $"{Value.Name} {Value.ShortDescription}" 
			: string.IsNullOrWhiteSpace(Placeholder)
				? "Nouns that start with..."
				: Placeholder;

	private string SearchTerm { get; set; } = string.Empty;
	private CancelableSearch? _CancelableSearch = default!;

	private IEnumerable<Noun> Options = new List<Noun>();
	
	protected override async Task OnInitializedAsync()
	{
		_CancelableSearch = new CancelableSearch(JS);
		await Task.CompletedTask;
	}

	#region Search
	private class CancelableSearch
	{
		public CancelableSearch(IJSRuntime js)
		{
			JS = js;
		}
		private IJSRuntime JS;
		public Task? Task { get; set; }
		public bool Searching => Task != null && !EolStatuses.Contains(Task!.Status);
		public bool Showing { get; set; } = false;
		public string MenuShownClass => Showing ? "show is-active" : "";
		
		public CancellationTokenSource? TokenSource { get; set; }
		public Exception? Exception;

		public static List<TaskStatus> EolStatuses = new List<TaskStatus> { TaskStatus.RanToCompletion, TaskStatus.Canceled };

		public void CancelSearch()
		{
			if(TokenSource != null)
			{
				var problem = EolStatuses.Any(st => st == Task?.Status);
				if (!problem)
				{
					TokenSource.Cancel();
				}
			}
		}
	}

	private async Task KeyUp(KeyboardEventArgs evt)
	{
		if(evt.Key == "ArrowDown" && !(evt.AltKey || evt.CtrlKey || evt.ShiftKey))
		{
			Console.WriteLine("ArrowDown pressed! TODO: Focus");
		}
		await Task.CompletedTask;
	}

	protected async Task DoSearch(string value)
	{
		Console.WriteLine($"\"{value}\"");
		if(SearchTerm != value)
		{
			// Cancel any other running search
			if(_CancelableSearch != null)
				_CancelableSearch.CancelSearch();
			// Update the value bound to the search input.
			SearchTerm = value;

			// Make a cancelable request to the API and process the response.
			var ts = new CancellationTokenSource();
			_CancelableSearch = new CancelableSearch(JS)
			{
				TokenSource = ts,
				Task = Task.Run(async () =>
				{
					if(string.IsNullOrWhiteSpace(SearchTerm))
					{
						Options = new List<Noun>();
						return;
					}

					// Request has started, show the dropdown-menu
					_CancelableSearch!.Showing = true;

					// Wait for the user to stop typing before querying DB.
					await Task.Delay(500);

					Console.Write($"\n\tInvoking Search({SearchTerm})... ");
					var results = await Search(SearchTerm);

					// If our Token didn't get canceled query the DB.
					if (ts.Token.IsCancellationRequested == false)
					{
						try
						{
							if(results == null)
							{
								throw new Exception($"No Results for term \"{SearchTerm}\"");
							}

							Console.WriteLine($" got {results.Count()}");
							Options = results;
							_CancelableSearch.Exception = null;
						}
						catch(Exception ex)
						{
							_CancelableSearch.Exception = ex;
						}
					}
				}, ts.Token)
			};

			await _CancelableSearch.Task;
		}
	}
	
	

	private async Task Populate()
	{
		using var db = Contexts.FIABContext.Create(Config);
		Options = await db.Nouns.AsNoTracking().ToListAsync();
	}

	private async Task OptionClicked(int id)
	{
		Console.WriteLine($"OptionClicked({id})");
		using var db = Contexts.FIABContext.Create(Config);
		var x = await db.Nouns.SingleOrDefaultAsync(n => n.Id == id);
		await ValueChanged.InvokeAsync(x);
		Console.WriteLine($"x: ({x?.Id}) {x?.Name} {x?.ShortDescription}");
		Console.WriteLine($"Value: ({Value?.Id}) {Value?.Name} {Value?.ShortDescription}");
		
		// Hide the options by emptying the list.
		Options = new List<Noun>();
	}
	#endregion
}