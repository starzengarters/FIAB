@using Microsoft.AspNetCore.Components.Forms

<div class="input-group mb-3">
	<InputText
		@bind-Value="SearchTerm"
		@oninput="(e) => DoSearch(e.Value?.ToString() ?? string.Empty)"
		placeholder="@Placeholder" aria-label="@Placeholder" aria-describedby="@($"{Id}-btn")" class="form-control" />
	<Button Color="ButtonColor.Dark" id="@($"{Id}-btn")">
		<Icon Name=IconName.CaretDownFill />
	</Button>
</div>
<div class="row">
	<div class="col">
		Matches:
		<ul>
		@foreach(var option in Options)
		{
			<li>
				@option.Name<br/>
				<span style="font-size: smaller;">@option.ShortDescription</span>
			</li>
		}
		</ul>
	</div>
</div>

@code
{
	[Parameter]
	[EditorRequired]
	public Noun? Value { get; set; }

	[Parameter]
	public EventCallback<Noun?> ValueChanged { get; set; }
	
	[Parameter]
	[EditorRequired]
	public string? Id { get; set; }

	[Parameter]
	[EditorRequired]
	public Func<string, Task<IEnumerable<Noun>>> Search { get; set; } = default!;

	[Parameter]
	public string Placeholder { get; set; } = "Search";

	private string SearchTerm { get; set; } = string.Empty;
	private IEnumerable<Noun> Options = new List<Noun>();

	protected override async Task OnParametersSetAsync()
	{
		if(Search != null)
			Options = await Search(SearchTerm);
		
		await base.OnParametersSetAsync();
	}

	private void KeyUp()
	{
		Console.WriteLine($"\n\tFrom KeyUp() SearchTerm: {SearchTerm}");
	}

	protected async Task DoSearch(string value)
	{
		if(SearchTerm != value)
		{
			SearchTerm = value;

			Console.Write($"\n\tInvoking Search({SearchTerm})");
			Options = await Search(SearchTerm);
			Console.WriteLine(Options.Count());
		}
	}
}