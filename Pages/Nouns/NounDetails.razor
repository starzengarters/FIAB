@page "/Nouns/{IdString}"
@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject IConfiguration Config

<div class="container">
<DisplayError Error=Error />

<ShowLoading Loading=Loading>
	<div class="row">
		<div class="col">
			<h1>@(Item == null ? $"Noun {Id}" : Item.Name)</h1>
			<div>@Item?.ShortDescription</div>
			<div>@Item?.Details</div>
		</div>
	</div>
	<div class="row mt-3">
		<div class="col">
			<h2>Relationships (@Relationships.Count)</h2>
		</div>
	</div>
	
	<div class="row row-cols-1 row-cols-lg-3 g-4">
		
		@foreach(var rel in Relationships)
		{
			<div class="col">
				<div class="card">
					<h5 class="card-header">@rel.Subject.Name <span style="font-size: smaller">@rel.Subject.ShortDescription</span></h5>
					<div class="card-body">
						<h5 class="card-title">@rel.RelationshipType.Name <span style="font-size: smaller">@rel.RelationshipType.ShortDescription</span></h5>
						<p class="card-text">@rel.Object.Name <span style="font-size: smaller">@rel.Object.ShortDescription</span></p>
						
						@if(rel.Started != null)
						{
							<div>
								<strong>Started: </strong> @(rel.StartedIsApproximate ? "c." : "") @rel.Started
							</div>
						}

						@if(rel.Ended != null)
						{
							<div>
								<strong>Ended: </strong> @(rel.EndedIsApproximate ? "c." : "") @rel.Ended
							</div>
						}
					</div>
				</div>
			</div>
		}
	</div>
</ShowLoading>
</div>

@code
{
	[Parameter]
	public string IdString { get; set; } = string.Empty;
	private int Id;

	private bool Loading = true;
	private Exception? Error;
	private Noun? Item;
	private List<Relationship> Relationships = new List<Relationship>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				Id = int.Parse(IdString);
				var tasks = new List<Task> { SetItem(), SetRelationships() };
				await Task.WhenAll(tasks);
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private FIABContext GetContext()
	{
		return FIABContext.Create(Config);
	}

	private async Task SetItem()
	{
		using var context = GetContext();
		Item = await context.Nouns.SingleAsync(n => n.Id == Id);
	}

	private async Task SetRelationships()
	{
		using var context = GetContext();
		Relationships = await context.Relationships
			.Include(r => r.Subject)
			.Include(r => r.RelationshipType)
			.Include(r => r.Object)
			.Where(r => r.Subject.Id == Id || r.Object.Id == Id)
			.OrderBy(r => r.Subject.Id == Id)
			.ToListAsync();
	}
}