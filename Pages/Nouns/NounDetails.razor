@page "/Nouns/{IdString}"
@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject IConfiguration Config

<div class="container">
<DisplayError Error=Error />

<ShowLoading Loading=Loading>
	<div class="row">
		<div class="col">
			<h1>@(Item == null ? $"Noun {Id}" : Item.Name)</h1>
		</div>
		<div class="col text-end pt-2">
			<Button Type="ButtonType.Link" To=@($"/Nouns/{Id}/Edit") Color="ButtonColor.Primary" Size="Size.Small">Edit</Button>
		</div>
	</div>
	<div class="row mt-2">
		<div class="col-2 text-end"><strong>Short Description:</strong></div>
		<div class="col">
			@Item?.ShortDescription
		</div>
	</div>
	<div class="row mt-2">
		<div class="col-2 text-end"><strong>Details:</strong></div>
		<div class="col">
			<TextToHtml Value=@Item?.Details />
		</div>
	</div>
	<div class="row mt-3 mb-3">
		<div class="col">
			<h2>Relationships (@Relationships.Count)</h2>
		</div>
		<div class="col text-end">
			<Button Color="ButtonColor.Primary" Size="Size.Large" Outline="true" Disabled=AddingRelationship @onclick=ShowAddRelationship>Add Relationship</Button>
		</div>
	</div>
	
	<div class="row row-cols-1 row-cols-lg-3 g-4">
		@if(AddingRelationship)
		{
			<EditRelationship Relationship=RelationshipToAdd OnCancel=HideAddRelationship />
		}
		@foreach(var rel in Relationships)
		{
			<DisplayRelationship Relationship="rel" CanEdit="true" />
		}
	</div>
</ShowLoading>
</div>

@code
{
	[Parameter]
	public string IdString { get; set; } = string.Empty;
	private int Id;

	private bool Loading = true;
	private Exception? Error;
	private Noun? Item;
	private List<Relationship> Relationships = new List<Relationship>();

	private bool AddingRelationship = false;
	private Relationship RelationshipToAdd = new Relationship();
	private void ShowAddRelationship()
	{
		RelationshipToAdd = new Relationship { Subject = Item };
		AddingRelationship = true;
	}

	private async Task _HideAddRelationship()
	{
		try
		{
			Loading = true;
			StateHasChanged();

			await SetRelationships();
			AddingRelationship = false;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private void HideAddRelationship()
	{
		// Squelching compiler warning, we are delibrately doing a fire-and-forget.
		#pragma warning disable 4014
		_HideAddRelationship();
		#pragma warning restore 4014
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				Id = int.Parse(IdString);
				var tasks = new List<Task> { SetItem(), SetRelationships() };
				await Task.WhenAll(tasks);
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private FIABContext GetContext()
	{
		return FIABContext.Create(Config);
	}

	private async Task SetItem()
	{
		using var context = GetContext();
		Item = await context.Nouns.SingleAsync(n => n.Id == Id);
	}

	private async Task SetRelationships()
	{
		using var context = GetContext();
		Relationships = await context.Relationships
			.Include(r => r.Subject)
			.Include(r => r.RelationshipType)
			.Include(r => r.Object)
			.Where(r =>
				(r.Subject != null && r.Subject.Id == Id)
				||(r.Object != null && r.Object.Id == Id))
			.OrderBy(r => r.Subject!.Id == Id)
			.ThenBy(r => r.Id)
			.ToListAsync();
	}
}