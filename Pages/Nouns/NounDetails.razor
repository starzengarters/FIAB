@page "/Nouns/{IdString}"
@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject IConfiguration Config

<div class="container">
<DisplayError Error=Error />

<AuthorizeView Roles=@Constants.Roles.User>
	<NotAuthorized>
		<Alert Color="AlertColor.Warning">@Constants.Messages.RoleRequiredUser</Alert>
	</NotAuthorized>
	<Authorized>
		<ShowLoading Loading=Loading>
			<div class="row">
				<div class="col">
					<h1>@(Item == null ? $"Noun {Id}" : Item.Name)</h1>
				</div>
				<div class="col text-end pt-2">
					<Button Type="ButtonType.Link" To=@($"/Nouns/{Id}/Edit") Color="ButtonColor.Primary" Size="Size.Small">Edit</Button>
				</div>
			</div>
			<div class="row mt-2">
				<div class="col-2 text-end"><strong>Short Description:</strong></div>
				<div class="col">
					@Item?.ShortDescription
				</div>
			</div>
			<div class="row mt-2">
				<div class="col-2 text-end"><strong>Details:</strong></div>
				<div class="col">
					<TextToHtml Value=@Item?.Details />
				</div>
			</div>
			<div class="row mt-3 mb-3">
				<div class="col">
					<h2>Relationships</h2>
				</div>
				<div class="col text-end">
					<Button Color="ButtonColor.Primary" Size="Size.Large" Outline="true" Disabled=AddingRelationship @onclick=ShowAddRelationship>Add Relationship</Button>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<SearchListing @ref=Search @bind-Value=Relationships Search=FilterListing Placeholder="Search Relationships..." />
				</div>
			</div>
			<ShowLoading Loading=_Searching Text="Filtering...">
				<FiabPager @ref=Paging @bind-Value=Relationships>
					<div class="row row-cols-1 row-cols-lg-3 g-4">
						@if(AddingRelationship)
						{
							<EditRelationship Relationship=RelationshipToAdd OnCancel=HideAddRelationship />
						}
						@foreach(var rel in Paging.FilteredList)
						{
							<DisplayRelationship Relationship="rel" CanEdit="true" />
						}
					</div>
				</FiabPager>
			</ShowLoading>
		</ShowLoading>
	</Authorized>
</AuthorizeView>
</div>

@code
{
	[Parameter]
	public string IdString { get; set; } = string.Empty;
	private int Id;

	private bool Loading = true;
	private Exception? Error;
	private Noun? Item;
	private IEnumerable<Relationship> Relationships = new List<Relationship>();

	private SearchListing<Relationship> Search = new SearchListing<Relationship>();
	private bool _Searching => Search?.Searching ?? false;
	private FiabPager<Relationship> Paging = new FiabPager<Relationship>();

	private bool AddingRelationship = false;
	private Relationship RelationshipToAdd = new Relationship();
	private void ShowAddRelationship()
	{
		RelationshipToAdd = new Relationship { Subject = Item };
		AddingRelationship = true;
	}

	private async Task _HideAddRelationship()
	{
		try
		{
			Loading = true;
			StateHasChanged();

			await Search.Initialize();
			AddingRelationship = false;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private void HideAddRelationship()
	{
		// Squelching compiler warning, we are delibrately doing a fire-and-forget.
		#pragma warning disable 4014
		_HideAddRelationship();
		#pragma warning restore 4014
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				Id = int.Parse(IdString);
				var tasks = new List<Task> { SetItem() };
				await Task.WhenAll(tasks);
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private FIABContext GetContext()
	{
		return FIABContext.Create(Config);
	}

	private async Task SetItem()
	{
		using var context = GetContext();
		Item = await context.Nouns.SingleAsync(n => n.Id == Id);
	}

	private async Task<IEnumerable<Relationship>> FilterListing(string filterTerm)
	{
		await Task.CompletedTask;
		try
		{
			using var context = FIABContext.Create(Config);
			var query = context.Relationships
				.Include(r => r.Subject)
				.Include(r => r.RelationshipType)
				.Include(r => r.Object)
				.Where(r =>
					(r.Subject != null && r.Subject.Id == Id)
					||(r.Object != null && r.Object.Id == Id));

			if(!string.IsNullOrWhiteSpace(filterTerm))
			{
				query = query.Where(r =>
					(r.Subject!.Name.ToLower().Contains(filterTerm.ToLower())
						|| (r.Subject!.ShortDescription != null && r.Subject!.ShortDescription.ToLower().Contains(filterTerm.ToLower()))
					)
					|| (r.Object!.Name.ToLower().Contains(filterTerm.ToLower())
						|| (r.Object!.ShortDescription != null && r.Object!.ShortDescription.ToLower().Contains(filterTerm.ToLower()))
					)
					|| (r.RelationshipType!.Name.ToLower().Contains(filterTerm.ToLower())
						|| (r.RelationshipType!.ShortDescription != null && r.RelationshipType!.ShortDescription.ToLower().Contains(filterTerm.ToLower()))
					)
				);
			}

			return query
				.OrderBy(r => r.Subject!.Id == Id)
				.ThenBy(r => r.Id);
		}
		catch(Exception ex)
		{
			Error = ex;
			return new List<Relationship>();
		}
	}
}