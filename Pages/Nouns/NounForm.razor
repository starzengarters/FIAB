@page "/Nouns/Create"
@page "/Nouns/{IdString}/Edit"
@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject IConfiguration Config

<div class="container">
<DisplayError Error=Error />

<AuthorizeView Roles=@Constants.Roles.User Context="auth">
	<NotAuthorized>
		<Alert Color="AlertColor.Warning">@Constants.Messages.RoleRequiredUser</Alert>
	</NotAuthorized>
	<Authorized>
		<ShowLoading Loading=Wtf>
			<h1>
				@(Editing ? $"Editing {Item.Id}" : "Create")
			</h1>
			<p>External WTF: @Wtf</p>
			<EditNoun @bind-Value=Item @bind-Wtf=Wtf />
		</ShowLoading>
		<p>
			<Button Type="ButtonType.Button" Color="ButtonColor.Info" onclick=@(async() => await InvokeAsync(() => Wtf = !Wtf))>WTF</Button>
		</p>
	</Authorized>
</AuthorizeView>
</div>

@code
{
	[Parameter]
	public string IdString { get; set; } = string.Empty;
	private Noun Item = new Noun();
	private bool Editing => Item.Id != 0;

	private Exception? Error;

	private bool Wtf = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				int id = 0;
				int.TryParse(IdString, out id);
				
				if(id != 0)
				{
					await SetItem(id);
				}
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			//Loading = false;
			StateHasChanged();
		}
	}

	private FIABContext GetContext()
	{
		return FIABContext.Create(Config);
	}

	private async Task SetItem(int id)
	{
		using var context = GetContext();
		Item = await context.Nouns.SingleAsync(n => n.Id == id);
	}
}