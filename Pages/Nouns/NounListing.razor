@page "/Nouns"
@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject IConfiguration Config

<div class="container">
@if(Error != null)
{
	<h1>Aw, snap!</h1>
	<p>@Error.Message</p>
	<p>@Error.InnerException?.Message</p>
	<p>@Error.StackTrace</p>
}

@if(Loading)
{
	<div class="row">
		<div class="offset-4 col-4 mt-4">
			<Spinner Title="Loading Page" />
			<span class="align-top ms-1">Loading...</span>
		</div>
	</div>
}
else
{

	<div class="row">
		<div class="col-8 ps-0">
			<h1 class="text-start">Nouns</h1>
		</div>
		<div class="col-md-4 ps-0">
			<Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/Nouns/Create"> Add a new Noun </Button>
		</div>
	</div>
	<div class="row">
		<table class="table table-striped">
			<thead>
				<tr>
					<th scope="col" class="col-8">Name</th>
					<th scope="col" class="col-4">Actions</th>
				</tr>
			</thead>
			<tbody>
			@foreach(var noun in Listing)
			{
				<tr>
					<td>
						@noun.Name<br/>
						<span style="font-size: smaller;">@noun.ShortDescription</span>
					</td>
					<td>
						<a href="/Nouns/@noun.Id">View</a>
						<a href="/Nouns/@noun.Id/Edit">Edit</a>
					</td>
				</tr>
			}
			</tbody>
		</table>
	</div>
}
</div>

@code
{
	private bool Loading = true;
	private Exception? Error;

	private List<Noun> Listing = new List<Noun>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				using var context = FIABContext.Create(Config);
				// TODO - Pagination and Filtering will be needed soon.
				Listing = await context.Nouns.ToListAsync();
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private FIABContext GetContext()
	{
		return FIABContext.Create(Config);
	}
}