@page "/RelationshipTypes"
@using FIAB.Models;
@using FIAB.Contexts;
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject IConfiguration Config

<div class="container">

<DisplayError Error=Error />

<AuthorizeView Roles=@Constants.Roles.User>
	<NotAuthorized>
		<Alert Color="AlertColor.Warning">@Constants.Messages.RoleRequiredUser</Alert>
	</NotAuthorized>
	<Authorized>
		<ShowLoading Loading=Loading>
			<div class="row">
				<div class="col-8 ps-0">
					<h1 class="text-start">Relationship Types</h1>
				</div>
				<div class="col-md-4 text-end">
					<Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/RelationshipTypes/Create"> Add a new Relationship Type </Button>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<SearchListing @ref=Search @bind-Value=Listing Search=FilterListing Placeholder="Search Relationship Types..." />
				</div>
			</div>
			<div class="row">
				<ShowLoading Loading=_Searching Text="Filtering...">
					<FiabPager @ref=Paging @bind-Value=Listing>
						<table class="table table-striped">
							<thead>
								<tr>
									<th scope="col" class="col-8">Name</th>
									<th scope="col" class="col-4">Actions</th>
								</tr>
							</thead>
							<tbody>
							@foreach(var rt in Paging.FilteredList)
							{
								<tr>
									<td>
										@rt.Name<br/>
										<span style="font-size: smaller;">@rt.ShortDescription</span>
									</td>
									<td class="text-end">
										<Button Type="ButtonType.Link" To=@($"/RelationshipTypes/{rt.Id}") Color="ButtonColor.Primary" Size="Size.Small">View</Button>
										<Button Type="ButtonType.Link" To=@($"/RelationshipTypes/{rt.Id}/Edit") Color="ButtonColor.Primary" Outline="true" Size="Size.Small">Edit</Button>
									</td>
								</tr>
							}
							</tbody>
						</table>
					</FiabPager>
				</ShowLoading>
			</div>
		</ShowLoading>
	</Authorized>
</AuthorizeView>
</div>

@code
{
	private bool Loading = true;
	private Exception? Error;

	private SearchListing<RelationshipType> Search = new SearchListing<RelationshipType>();
	private bool _Searching => Search?.Searching ?? false;
	private FiabPager<RelationshipType> Paging = new FiabPager<RelationshipType>();

	private IEnumerable<RelationshipType> Listing = new List<RelationshipType>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if(firstRender)
			{
				await Task.CompletedTask;
			}
		}
		catch(Exception ex)
		{
			Error = ex;
		}
		finally
		{
			Loading = false;
			StateHasChanged();
		}
	}

	private FIABContext GetContext()
	{
		return FIABContext.Create(Config);
	}

	private async Task<IEnumerable<RelationshipType>> FilterListing(string filterTerm)
	{
		await Task.CompletedTask;
		try
		{
			using var context = FIABContext.Create(Config);
			var query = context.RelationshipTypes.Where(n => true);

			if(!string.IsNullOrWhiteSpace(filterTerm))
			{
				query = query.Where(n =>
					n.Name.ToLower().Contains(filterTerm.ToLower())
					|| (n.ShortDescription != null && n.ShortDescription.ToLower().Contains(filterTerm.ToLower())));
			}

			return query;
		}
		catch(Exception ex)
		{
			Error = ex;
			return new List<RelationshipType>();
		}
	}
}